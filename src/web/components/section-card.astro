---
import type { SectionConfig } from '@/types/shared';
import ShowSelectedOnlyToggle from '@/web/components/show-selected-only-toggle.astro';
import Typography from './typography.astro';
import CollapsibleDiv from './collapsible-div.astro';

export interface Props extends SectionConfig {
  className?: string;
  hideTitle?: boolean;
  isCollapsible?: boolean;
}

const { title, slug, hideTitle, isCollapsible, className, visible, showSelectedOnly, counter } = Astro.props;
---

{
  visible && (
    <div
      id={slug}
      data-type="section"
      class:list={['flex flex-col gap-6 rounded-2xl bg-white p-8 shadow-md dark:bg-gray-800', className]}
    >
      <div
        class:list={['flex', className]}
      >
        {!hideTitle && counter && <Typography variant="section-title">{title} ({counter})</Typography>}
        {!hideTitle && !counter && <Typography variant="section-title">{title}</Typography>}
        {showSelectedOnly && <ShowSelectedOnlyToggle title={title} relatedTo={slug} />}
      </div>

      <!-- Alternative Divs, either collapsable or not -->
      {isCollapsible && <CollapsibleDiv relatedTo={slug}> <slot /> </CollapsibleDiv> }
      {!isCollapsible && <slot /> }
      
    </div>
  )
}



<script>
  import hashState from '@/web/utils/hash-state';
  import throttle from '@/web/utils/throttle';

  const sections = [...document.querySelectorAll('[data-type="section"]')];

  const isInUpperView = (section: Element) => section.getBoundingClientRect().bottom >= window.innerHeight / 3;

  const updateHash = () => {
    const currentSection = sections.find(isInUpperView);

    if (currentSection) {
      hashState.updateHash(currentSection.id);
    }
  };

  document.addEventListener('scroll', throttle(updateHash, 200));
</script>
